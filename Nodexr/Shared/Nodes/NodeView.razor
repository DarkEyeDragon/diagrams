
@inject INodeDragService NodeDragService
@inject INodeHandler  NodeHandler
@inject IModalService Modal
@inject INoodleDragService NoodleDragService

@implements IDisposable

    <div class="node @CssClass"
         style="top: @(Data.Pos.y)px; left: @(Data.Pos.x)px; --col-node-accent:@Data.CssColor;"
         onmousedown="event.stopPropagation()" ondragleave="tempNoodle.setInvalid()"
         ondragover="event.preventDefault(); tempNoodle.setValid();"
         @onfocusin="Deselect"
         @ondrop="@(() => NoodleDragService.OnDropNoodle(Data.Previous))">

        <div draggable="true" @ondragstart="StartDrag" @onclick="Select" class="node-drag-region"></div>

        <div class="node-title @(Data.IsCollapsed ? "collapsed" : "")"
             style="background-color: var(--col-node-accent);">
            @if (!Data.IsCollapsed)
            {
                <button @onclick="ToggleCollapsed" class="collapse-button"><i class="fas fa-chevron-down"></i></button>
            }
            else
            {
                <button @onclick="ToggleCollapsed" class="collapse-button" style="top:-2px;"><i class="fas fa-chevron-up"></i></button>
            }

            <b>@Data.Title</b>
            <button class="icon-button info-button"
                    @onclick="ShowModal">
                <i class="fas fa-info-circle"></i>
            </button>
        </div>

        @if (!Data.IsCollapsed)
        {
            <div class="node-content"
                 @onclick:stopPropagation>
                @foreach (INodeInput nodeInput in Data.NodeInputs)
                {
                    if (nodeInput.IsEnabled())
                    {
                        <NodeInputView Data="nodeInput" />
                    }
                }
            </div>
        }

        <NodeInputDot Input="Data.Previous" IsPrevious="true" />

        @*Output dot*@
        @if (!(Data is OutputNode))
        {
            <NodeOutputDot Data="Data" />
        }
    </div>


@functions{
    [Parameter] public INode Data { get; set; }

    string CssClass => NodeHandler.IsNodeSelected(Data) ? "node-selected" : "";

    protected override void OnInitialized()
    {
        Data.OutputChanged += Refresh;
        Data.LayoutChanged += Refresh;
        Data.Selected += Refresh;
        Data.Deselected += Refresh;
    }

    void ToggleCollapsed()
    {
        Data.IsCollapsed = !Data.IsCollapsed;
        Data.OnLayoutChanged(this, EventArgs.Empty);
    }

    void StartDrag(DragEventArgs e)
    {
        NodeDragService.OnStartNodeDrag(Data, e);
    }

    void ShowModal()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(NodeInfo.InfoText), Data.NodeInfo);
        Modal.Show(typeof(NodeInfo), Data.Title, modalParameters);
    }

    void Refresh(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    void Select()
    {
        NodeHandler.SelectNode(Data);
    }

    void Deselect()
    {
        NodeHandler.DeselectAllNodes();
    }

    public void Dispose()
    {
        Data.OutputChanged -= Refresh;
        Data.LayoutChanged -= Refresh;
        Data.Selected -= Refresh;
        Data.Deselected -= Refresh;
    }
}