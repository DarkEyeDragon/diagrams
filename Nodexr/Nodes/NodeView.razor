@inject INodeDragService NodeDragService
@inject INodeHandler NodeHandler
@inject IModalService Modal
@inject INoodleDragService NoodleDragService
@inject IJSRuntime JSRuntime

@implements IDisposable

<div class="node @CssClass"
     style="transform: @CssTransform; --col-node-accent:@Data.CssColor;"
     ondragleave="tempNoodle.setInvalid()"
     ondragover="event.preventDefault(); tempNoodle.setValid();"
     @onmousedown="OnMouseDown" @onmousedown:stopPropagation
                                @onfocusin="Deselect"
     @ondrop="@(() => NoodleDragService.OnDropNoodle(Data.PrimaryInput))">
    <div class="node-content" 
         @onclick:stopPropagation
         @onkeydown:stopPropagation>
        <button class="icon-button info-button" title="About this node"
                        @onclick="ShowModal">
                    <i class="fas fa-info-circle"></i>
                </button>
        @foreach (INodeInput nodeInput in Data.NodeInputs)
        {
            if (nodeInput.Enabled())
            {
                <NodeInputView Data="nodeInput"/>
            }
        }
    </div>

    <NodeInputDot Input="Data.PrimaryInput" IsPrevious="true"/>

    @*Output dot*@
    @if (!(Data is OutputNode))
    {
        <NodeOutputDot Data="Data"/>
    }
</div>

@code {

    [Parameter]
    public INodeViewModel Data { get; set; } = null!;

    string CssClass => Data.Selected ? "node-selected" : "";
    string CssTransform => FormattableString.Invariant($"translate({(long)Data.Pos.x}px, {(long)Data.Pos.y}px)");

    protected override void OnInitialized()
    {
        Data.OutputChanged += Refresh;
        Data.LayoutChanged += Refresh;
        Data.SelectionChanged += Refresh;
    }

    void ToggleCollapsed()
    {
        Data.IsCollapsed = !Data.IsCollapsed;
        Data.OnLayoutChanged(this, EventArgs.Empty);
    }

    async Task OnMouseDown(MouseEventArgs e)
    {
        var isMultiSelect = e.ShiftKey || e.CtrlKey;
        NodeHandler.Tree.SelectNode(Data, isMultiSelect);

        if (!isMultiSelect)
        {
            NodeDragService.OnStartNodeDrag(Data, e);
            await JSRuntime.InvokeVoidAsync("NodeDragHandler.startNodeDrag");
        }
    }

    void ShowModal()
    {
        var modalParameters = new ModalParameters();
        modalParameters.Add(nameof(NodeInfo.InfoText), Data.NodeInfo);
        Modal.Show<NodeInfo>(Data.Title, modalParameters);
    }

    void Refresh(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    void Deselect()
    {
        NodeHandler.Tree.DeselectAllNodes();
    }

    public void Dispose()
    {
        Data.OutputChanged -= Refresh;
        Data.LayoutChanged -= Refresh;
        Data.SelectionChanged -= Refresh;
    }

}
