@using Nodexr.Shared.NodeTreeBrowser
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject NodeTreeBrowserService browserService

<div class="row" style="height:400px;">
    <div class="col" style="height:100%; overflow:auto">
        @if (isLoadingFirstItems)
        {
        <div class="d-flex justify-content-center align-items-center h-100">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
        }
        <div class="list-group">
            <Virtualize Context="nodeTree" ItemsProvider="LoadNodeTrees" OverscanCount="10" ItemSize="64" >
                <Placeholder>
                    <li class="list-group-item bg-dark">
                        <strong>Loading...</strong>
                    </li>
                </Placeholder>
                <ItemContent>
                    <NodeTreePreview Model="nodeTree" OnSelected="SelectNodeTree" />
                </ItemContent>
            </Virtualize>
        </div>
    </div>
    <div class="col">
        <NodeTreeDetailsView/>
    </div>
</div>


@code {
    bool isLoadingFirstItems = true;

    private void SelectNodeTree(NodeTreePreviewModel tree)
    {
        browserService.SelectedNodeTree = tree;
    }

    private async ValueTask<ItemsProviderResult<NodeTreePreviewModel>> LoadNodeTrees(
        ItemsProviderRequest request)
    {
        //TODO: Handle HttpRequestException
        try
        {
            var nodeTreesPaged = await browserService.GetAllNodeTrees(
                request.CancellationToken,
                request.StartIndex,
                request.Count);

            if (isLoadingFirstItems)
            {
                isLoadingFirstItems = false;
                StateHasChanged();
            }

            return new ItemsProviderResult<NodeTreePreviewModel>(nodeTreesPaged.Contents, nodeTreesPaged.TotalSize);
        }
        catch (OperationCanceledException)
        {
            return new ItemsProviderResult<NodeTreePreviewModel>();
        }

    }
}
