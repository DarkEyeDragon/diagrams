@using RegexNodes.Shared;
@using RegexNodes.Shared.NodeTypes;
@using RegexNodes.Shared.Components;
@inject INodeDragService NodeDragService
@inject INodeHandler  NodeHandler

@{
    //Console.WriteLine("Updating Node Graph");
}
<div class="viewport nodegraph" onwheel="panzoom.zoom(event)" onmousedown="panzoom.startPan(event)"
    ondragover="event.preventDefault()" @ondrop="@NodeDragService.OnDrop" @onkeydown="@DeleteSelectedNode" tabindex="-1">
    <div style="width:100%; height:100%; position:absolute;" @onclick="@DeselectNode"></div>
    <div id="nodegraph" style="position:relative; transform-origin:0% 0%; width:0px; height:0px;">
        @for (int i = 0; i < NodeHandler.Nodes.Count; i++)
        {
            INode node = NodeHandler.Nodes[i];
            <NodeRender Data="node" />
        }
        <svg style="overflow:visible;">
            <NoodleSvg Noodle="NodeDragService.TempNoodle" DomId="tempNoodle" />
            <NoodleCollection Nodes="@NodeHandler.Nodes"/>
        </svg>
    </div>
</div>

@functions{

    protected int XOffset { get; set; } = 0;
    //OutputDisplay outputDisplay;

    protected override void OnInitialized()
    {
        //NodeHandler.OnNodeCountChanged += StateHasChanged;
        NodeHandler.OnRequireNodeGraphRefresh = StateHasChanged;
    }

    void DeleteSelectedNode(KeyboardEventArgs e)
    {
        if (e.Key == "Delete")
        {
            NodeHandler.DeleteSelectedNode();
        }
    }

    void DeselectNode()
    {
        NodeHandler.SelectedNode = null;
        StateHasChanged();
    }

    void RecomputeOutput()
    {
        throw new NotImplementedException();
    }
}