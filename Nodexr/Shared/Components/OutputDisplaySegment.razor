@implements IDisposable
@inject INodeHandler NodeHandler

<span class="output-regex-text output-segment @(NodeHandler.IsNodeSelected(Segment.Node) ? "output-segment-selected" : "")"
      style="color:@(Segment.Node?.CssColor ?? "inherit")"
       @onmouseover="@(() => NodeHandler.SelectNode(Segment.Node))"
      title="@Segment.Node.Title"
      >@Segment.Expression</span>

@code {
    private RegexSegment segment { get; set; }
    [Parameter] public RegexSegment Segment
    {
        get => segment;
        set
        {
            if(segment != null)
            {
                segment.Node.SelectionChanged -= Refresh;
            }
            segment = value;
            segment.Node.SelectionChanged += Refresh;
        }
    }

    private void Refresh(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        segment.Node.SelectionChanged -= Refresh;
    }
}